from typing import *
from dataclasses import dataclass, field
from pathlib import Path
from abc import ABC, abstractmethod

FilePath = Path
dirPath = Path


@dataclass
class ConversionOutcome():
    """
    A class representing the outcome of a file conversion operation.

    Attributes:
    - input_file (FilePath): The input file for the conversion.
    - output_files (List[FilePath]): The output files generated by the conversion.
    - warning_messages (List[str]): Any warning messages generated during the conversion.
    
    - skipped (bool): Indicates whether the conversion was skipped. Default is False.
    - successful (bool): Indicates whether the conversion was successful. Default is True.
    - error_message (str): Contains any error message generated during the conversion. Default is an empty string.
    - halt (bool): Indicates whether the conversion should be halted. Default is False.
    """
    input_file: FilePath
    output_files: List[FilePath] = field(default_factory=list)
    warning_messages: List[str] = field(default_factory=list)
    
    skipped: bool = False
    successful: bool = True
    error_message: str = ""
    halt: bool = False


class SingleFileConversionFunction(ABC):
    """
    An abstract class representing a single-file conversion function.

    Inherits from ConversionFunction.

    Attributes:
        is_batchable (ClassVar[bool]): Indicates that this conversion function can handle single-file processing.
    """
    is_batchable: ClassVar[bool] = False

    @abstractmethod
    def skip_single_file(self, input_file: FilePath, output_dir: dirPath) -> List[ConversionOutcome]: 
        """
        An abstract method that determines whether a single file should be skipped during the conversion process.

        Parameters:
            input_file (FilePath): The input file to be checked for skipping.
            output_dir (dirPath): The output dir where the converted file will be saved.

        Returns:
            List[ConversionOutcome]: A list containing a single ConversionOutcome object. If the file should be skipped, the ConversionOutcome object will have the 'skipped' attribute set to True. Otherwise, it will have the 'skipped' attribute set to False.
        """
        ... 

    @abstractmethod
    def conversion(self, input_file: FilePath, output_dir: dirPath) -> List[ConversionOutcome]: 
        """
        Performs the single-file conversion operation.

        This method is intended to be implemented by subclasses to define the specific conversion logic.
            - The conversion function should read the input file, perform the conversion, and write the converted file to the output dir.
            - The conversion function should return a ConversionOutcome object encapsulated in a list, that contains information about the conversion process, such as success status, warning messages, and any error messages encountered.
            - It is expected that any errors and exceptions should be caught and noted in the ConversionOutcome object.

        Parameters:
            input_file (FilePath): The input file to be converted.
            output_dir (dirPath): The dir where the converted file will be saved.
            overwrite (bool): A flag indicating whether to overwrite existing files in the output dir. Default is True.

        Returns:
            List[ConversionOutcome]: A list containing a single ConversionOutcome object. The ConversionOutcome object will contain information about the conversion process, such as success status, warning messages, and any error messages encountered.
        """
        ...   
    
    @abstractmethod
    def clean_up(self, input_file: FilePath, output_dir: dirPath) -> None: 
        """
        Performs cleanup after a single-file or batch conversion operation.

        This method is intended to be implemented by subclasses to perform any necessary cleanup tasks after the conversion process.
        It should handle any resources that need to be released or finalized.
        If there is no cleanup tasks to perform, this method should be left empty.

        Parameters:
            input_file (FilePath): The input file or dir that was processed during the conversion.
            output_dir (dirPath): The output dir where the converted files were saved.
        """
        ... 

    def __call__(self, input_file: FilePath, output_dir: dirPath, overwrite: bool = True) -> List[ConversionOutcome]: 
        """
        Executes the single-file conversion operation based on the provided parameters.

        This method is responsible for orchestrating the single-file conversion process. It checks for the 'overwrite' flag,
        skips the conversion if necessary, executes the conversion, and performs cleanup afterward.

        Parameters:
            input_file (FilePath): The input file to be converted.
            output_dir (dirPath): The dir where the converted file will be saved.
            overwrite (bool): A flag indicating whether to overwrite existing files in the output dir. Default is True.

        Returns:
            List[ConversionOutcome]: A list containing a single ConversionOutcome object. The ConversionOutcome object will contain information about the conversion process, such as success status, warning messages, and any error messages encountered.
        """
        
        if not overwrite:
            if skip := self.skip_single_file(input_file, output_dir):
                return skip
        
        try:
            return self.conversion(input_file, output_dir)
        finally:
            self.clean_up(input_file, output_dir)


class BatchConversionFunction(ABC):
    """
    An abstract class representing a batch conversion function.

    Inherits from ConversionFunction.

    Attributes:
        is_batchable (ClassVar[bool]): Indicates that this conversion function can handle batch processing.
    """
    is_batchable: ClassVar[bool] = True

    @abstractmethod
    def skip_single_file(self, input_file: FilePath, output_dir: dirPath) -> List[ConversionOutcome]:
        """
        (non-batch only) An abstract method that determines whether a single file should be skipped during the conversion process.

        Parameters:
            input_file (FilePath): The input file to be checked for skipping.
            output_dir (dirPath): The output dir where the converted file will be saved.

        Returns:
            List[ConversionOutcome]: A list containing a single ConversionOutcome object. If the file should be skipped, the ConversionOutcome object will have the 'skipped' attribute set to True. Otherwise, it will have the 'skipped' attribute set to False.
        """
        ... 

    @abstractmethod
    def single_file_conversion(self, input_file: FilePath, output_dir: dirPath) -> List[ConversionOutcome]:
        """
        (non-batch only) Performs the single-file conversion operation.

        This method is intended to be implemented by subclasses to define the specific conversion logic.
            - The conversion function should read the input file, perform the conversion, and write the converted file to the output dir.
            - The conversion function should return a ConversionOutcome object encapsulated in a list, that contains information about the conversion process, such as success status, warning messages, and any error messages encountered.
            - It is expected that any errors and exceptions should be caught and noted in the ConversionOutcome object.

        Parameters:
            input_file (FilePath): The input file to be converted.
            output_dir (dirPath): The dir where the converted file will be saved.
            overwrite (bool): A flag indicating whether to overwrite existing files in the output dir. Default is True.

        Returns:
            List[ConversionOutcome]: A list containing a single ConversionOutcome object. The ConversionOutcome object will contain information about the conversion process, such as success status, warning messages, and any error messages encountered.
        """
        ...   

    @abstractmethod
    def batch_conversion(self, input_dir: dirPath, output_dir: dirPath, overwrite: bool = True) -> List[ConversionOutcome]:
        """
        (batch only) Performs the batch conversion operation.

        This method is intended to be implemented by subclasses to define the specific batch conversion logic.
            - The conversion function should read all files in the input dir, perform the conversion, and write the converted files to the output dir.
            - The conversion function should return a list of ConversionOutcome objects, each containing information about the conversion process of a single file, such as success status, warning messages, and any error messages encountered.
            - It is expected that any errors and exceptions should be caught and noted in the ConversionOutcome objects.

        Parameters:
            input_dir (dirPath): The dir containing the input files to be converted.
            output_dir (dirPath): The dir where the converted files will be saved.
            overwrite (bool): A flag indicating whether to overwrite existing files in the output dir. Default is True.

        Returns:
            List[ConversionOutcome]: A list of ConversionOutcome objects. Each ConversionOutcome object will contain information about the conversion process of a single file.
        """
        ...
    
    @abstractmethod
    def single_file_clean_up(self, input_file: FilePath, output_dir: dirPath) -> None:
        """
        (non-batch only) Performs cleanup after a single-file or batch conversion operation.

        This method is intended to be implemented by subclasses to perform any necessary cleanup tasks after a single file conversion process.
        It should handle any resources that need to be released or finalized.
        If there is no cleanup tasks to perform, this method should be left empty.

        Parameters:
            input_file (FilePath): The input file or dir that was processed during the conversion.
            output_dir (dirPath): The output dir where the converted files were saved.
        """
        ...
    
    @abstractmethod
    def batch_clean_up(self, input_dir: dirPath, output_dir: dirPath) -> None:
        """
        Performs cleanup after a batch conversion operation.

        This method is intended to be implemented by subclasses to perform any necessary cleanup tasks after a batch conversion process.
        It should handle any resources that need to be released or finalized.
        If there is no cleanup tasks to perform, this method should be left empty.

        Parameters:
            input_dir (dirPath): The dir containing the input files that were processed during the batch conversion.
            output_dir (dirPath): The dir where the converted files were saved.
        """
        ...
    
    @overload
    def __call__(self, input_path: FilePath, output_dir: dirPath, do_batch: Literal[False], overwrite: bool = True) -> List[ConversionOutcome]:...
    
    @overload
    def __call__(self, input_path: dirPath, output_dir: dirPath, do_batch: Literal[True], overwrite: bool = True) -> List[ConversionOutcome]:...

    def __call__(self, input_path: Union[FilePath, dirPath], output_dir: dirPath, do_batch: bool = True, overwrite: bool = True) -> List[ConversionOutcome]: 
        """
        Executes the batch or single-file conversion operation based on the provided parameters.

        Parameters:
            input_path (Union[FilePath, dirPath]): The input file or dir for the conversion.
            output_dir (dirPath): The output dir where the converted files will be saved.
            do_batch (bool): A flag indicating whether to perform batch conversion. Default is True.
            overwrite (bool): A flag indicating whether to overwrite existing files in the output dir. Default is True.

        Returns:
            List[ConversionOutcome]: A list of ConversionOutcome objects. If performing batch conversion, it will contain the results of each file conversion. If performing single-file conversion, it will contain a single ConversionOutcome object.
        """
        if do_batch:
            try:
                return self.batch_conversion(input_path, output_dir, overwrite)
            finally:
                self.batch_clean_up(input_path, output_dir)
        else:
            if not overwrite:
                if skip := self.skip_single_file(input_path, output_dir):
                    return skip
            try: 
                return self.single_file_conversion(input_path, output_dir)
            finally:
                self.single_file_clean_up(input_path, output_dir)
            
    
_ConversionFunction = Union[SingleFileConversionFunction, BatchConversionFunction]
